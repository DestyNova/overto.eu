
   <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
     <channel>
       <title>Pages on Over to you</title>
       <link>https://overto.eu/pages/</link>
       <description>Recent content in Pages on Over to you</description>
       <generator>Hugo -- gohugo.io</generator>
       <language>en-ie</language>
       <lastBuildDate>Sun, 19 Apr 2020 17:26:19 +0100</lastBuildDate>
       
           <atom:link href="https://overto.eu/pages/index.xml" rel="self" type="application/rss+xml" />
       
       
       <item>
         <title>Learning</title>
         <link>https://overto.eu/pages/learning/</link>
         <pubDate>Sun, 19 Apr 2020 17:26:19 +0100</pubDate>
         
         <guid>https://overto.eu/pages/learning/</guid>
         <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Experiences with tutorials, books or courses I&amp;#8217;ve taken in recent times.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_the_haskell_book&#34;&gt;&lt;a href=&#34;https://haskellbook.com/&#34;&gt;The Haskell book&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;October 2017&amp;#8201;&amp;#8212;&amp;#8201;present&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This is a very well-written book. But I found it hard to make progress quickly because some of the exercises were quite difficult and I felt compelled to complete them before moving on, although I think the author specifically advises to not get stuck on them and just move on if need be.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_ocaml_workshop_part_2_exercises&#34;&gt;&lt;a href=&#34;https://github.com/janestreet/learn-ocaml-workshop&#34;&gt;OCaml workshop&lt;/a&gt;, part 2: exercises&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;March 2020&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;These were really nice and simple. Each exercise had a small, understandable scope and most were simple enough that I didn&amp;#8217;t get stuck. Each set of exercises was in a separate directory, numbered from 01 to 21, and running the test suite generally took a second or less, so I used a script to automatically call &lt;code&gt;dune runtest&lt;/code&gt; whenever I saved changes to that exercise&amp;#8217;s &lt;code&gt;problem.ml&lt;/code&gt; file. I wish more tutorials were written with this emphasis on manageable exercises and an easy UX. I&amp;#8217;m not sure if I&amp;#8217;ll continue with the next sections which involve games and bigger projects, but we&amp;#8217;ll see.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_the_rust_tutorial&#34;&gt;The &lt;a href=&#34;https://doc.rust-lang.org/stable/book&#34;&gt;Rust tutorial&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;2019&amp;#8201;&amp;#8212;&amp;#8201;present&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I come back to this one every couple of months. It&amp;#8217;s well-written but a bit verbose.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_go_by_example&#34;&gt;&lt;a href=&#34;https://gobyexample.com&#34;&gt;Go by example&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;March 2020&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This was fun and easy, perhaps as a byproduct of Go being quite a simple language. Unlike Rust and Haskell which require a lot of discussion about abstract concepts (and exercises to discover that you still didn&amp;#8217;t get it), Go&amp;#8217;s simplicity means you spend more time focusing on more immediately practical topics. I was surprised to note some strange idiosyncrasies with Go and its standard lib, though&amp;#8201;&amp;#8212;&amp;#8201;for example, when parsing a date, you need to provide a sample date in the desired format&amp;#8230;&amp;#8203; the sample date needs to be a very specific reference date: &lt;code&gt;Mon Jan 2 15:04:05 MST 2006&lt;/code&gt; (i.e. day of week 0, month 1, day 2, hour 3, minute 4, second 5, year (200)6&amp;#8230;&amp;#8203; MST is &lt;a href=&#34;https://en.wikipedia.org/wiki/Mountain_Time_Zone&#34;&gt;Mountain Standard Time&lt;/a&gt; which I assume was the time zone where one of the language authors lived). If you supply a different date, then times that you parse might &lt;em&gt;silently&lt;/em&gt; be parsed into incorrect timestamps. Weird. Still, the tutorial was refreshing and I managed to glide through over several days, spending maybe 30 minutes a day.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_liquid_haskell_tutorial&#34;&gt;&lt;a href=&#34;https://ucsd-progsys.github.io/liquidhaskell-tutorial/&#34;&gt;Liquid Haskell tutorial&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;April 2020&amp;#8201;&amp;#8212;&amp;#8201;present&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Another well-written and surprisingly concise tutorial. I didn&amp;#8217;t know much about refinement types (or automated proof checking in general) so expected this to be heavy on mathematical foundations. I&amp;#8217;m on chapter 6 now and there&amp;#8217;s been none of that&amp;#8201;&amp;#8212;&amp;#8201;it&amp;#8217;s remarkably practical and usable right from the beginning, and I&amp;#8217;m quite excited about using it in real projects (despite my poor knowledge of Haskell). One problem so far is that some of the samples and exercises can&amp;#8217;t be compiled for various reasons, so I&amp;#8217;ve had to open a couple of issues on the Github repo to get help. Luckily, the authors have been very helpful and responsive, so I have no doubt this will improve in future.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
       </item>
       
       <item>
         <title>Software</title>
         <link>https://overto.eu/pages/software/</link>
         <pubDate>Sat, 14 Mar 2020 21:33:00 +0100</pubDate>
         
         <guid>https://overto.eu/pages/software/</guid>
         <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Some software I&amp;#8217;ve written and released as open-source:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://metronome.overto.eu&#34;&gt;Metron&lt;/a&gt; (&lt;a href=&#34;https://github.com/DestyNova/metron&#34;&gt;source&lt;/a&gt;)&amp;#8201;&amp;#8212;&amp;#8201;a minimal implementation of a metronome that allows you to only play the first of every &lt;strong&gt;N&lt;/strong&gt; beats. Uses the HTML5 webaudio API to play clicks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://pitcher.overto.eu&#34;&gt;Pitcher&lt;/a&gt; (&lt;a href=&#34;https://github.com/DestyNova/pitcher&#34;&gt;source&lt;/a&gt;)&amp;#8201;&amp;#8212;&amp;#8201;a collection of exercises for training and testing absolute pitch (also known as perfect pitch). I&amp;#8217;ve been training with it for a while and still don&amp;#8217;t have perfect pitch, but maybe I&amp;#8217;ll update this if that changes. Implemented in &lt;a href=&#34;https://elm-lang.org&#34;&gt;Elm&lt;/a&gt; and uses the HTML5 webaudio API to control sounds.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://shotclock.overto.eu&#34;&gt;Shotclock&lt;/a&gt; (&lt;a href=&#34;https://github.com/DestyNova/shotclock&#34;&gt;source&lt;/a&gt;)&amp;#8201;&amp;#8212;&amp;#8201;a shot clock for snooker shootout games. Implemented in &lt;a href=&#34;https://elm-lang.org&#34;&gt;Elm&lt;/a&gt; and uses the HTML5 webaudio API to control sounds.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://iconic.overto.eu&#34;&gt;The Iconic Memory Game&lt;/a&gt; (&lt;a href=&#34;https://github.com/DestyNova/iconic-memory-game&#34;&gt;source&lt;/a&gt;)&amp;#8201;&amp;#8212;&amp;#8201;a memory game based on the tachistoscope experiments by George Sperling in the 1960s which sought to characterise the visual short-term memory system. Implemented in &lt;a href=&#34;https://elm-lang.org&#34;&gt;Elm&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://bw.overto.eu&#34;&gt;Blinkenwords&lt;/a&gt; (&lt;a href=&#34;https://github.com/DestyNova/blinkenwords-elm&#34;&gt;source&lt;/a&gt;)&amp;#8201;&amp;#8212;&amp;#8201;a minimalist rapid serial visual presentation (RSVP) reading utility. Implemented in &lt;a href=&#34;https://elm-lang.org&#34;&gt;Elm&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/DestyNova/Gluap&#34;&gt;Gluap&lt;/a&gt;&amp;#8201;&amp;#8212;&amp;#8201;a stalled implementation of the PushGP stack-based genetic programming framework. Implemented in &lt;a href=&#34;https://www.lua.org/&#34;&gt;Lua&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
       </item>
       
     </channel>
   </rss>
